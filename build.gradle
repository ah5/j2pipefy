plugins {
    id 'base'
    id 'groovy'
    id 'war'
    id 'jacoco'
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'http://repo.jenkins-ci.org/releases/' }
    maven { url 'https://jitpack.io' }
}

configurations { codacy }

dependencies {
    compile     group: 'org.codehaus.groovy',       name: 'groovy-all',             version: '2.4.15'
    compile     group: 'org.jenkins-ci.plugins',    name: 'credentials-binding',    version: '1.16'
    testCompile group: 'com.lesfurets',             name: 'jenkins-pipeline-unit',  version: '1.0'    
    testCompile group: 'junit',                     name: 'junit',                  version: '4.11'
    codacy      group: 'com.github.codacy',         name: 'codacy-coverage-reporter', version: '2.0.1'
}

sourceSets {
    main {
        groovy {
            srcDirs = ['src', 'vars']
            exclude '**/validefy.groovy'
        }
    }
    test {
        groovy {
            srcDirs = ['test']
        }
        resources {
            srcDirs = ['test/resources']
        }
    }
}

clean.doFirst {
    println "Removing build dir ..."
    delete "${buildDir}"
    println "Removing docs artifacts ..."
    delete fileTree(rootDir) { 
        include "docs/web/*.html"
        include "docs/web/*.ico"
        include "docs/web/*.gif"
        include "docs/web/*.css"
        include "docs/web/package-list"
        include "docs/web/DefaultPackage/"
    }
}

compileGroovy.dependsOn clean
compileGroovy.options.compilerArgs += ['-proc:none']
compileTestGroovy.options.compilerArgs += ['-proc:none']

test {
    testLogging {
        events "skipped", "failed"
        exceptionFormat "short"
        showExceptions true
        showCauses true
        if(project.hasProperty('test_debug') && (project.getProperty('test_debug') == "true")) {
            events "passed", "skipped", "failed", "standardError", "standardOut"
            exceptionFormat "full"
        }
        afterSuite { desc, result ->
            if (!desc.parent) {
                logger.lifecycle "\nResults: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

groovydoc {
    dependsOn compileGroovy
    docTitle = description
    source = sourceSets.main.groovy
    destinationDir = new File('docs/web')
    classpath = configurations.compile
}

war {
    dependsOn groovydoc
    from 'docs/web'
    webInf {
        from 'docs/web/WEB-INF'
    }
    webXml = file('docs/web/WEB-INF/web.xml')
}

build.dependsOn clean, war

jacocoTestReport {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    sourceSets sourceSets.test
    reports {
        xml.enabled true
        csv.enabled false
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
    }
}

task codacyCoverageUpload(type: JavaExec, dependsOn: jacocoTestReport) {
    classpath = configurations.codacy
    main 'com.codacy.CodacyCoverageReporter'
    args = [
        '-l', 'Java', 
        '-r', tasks.jacocoTestReport.reports.xml.destination,
        '--projectToken', '2e3e7e02b3d249998caebe9398c80daf'
    ]
}